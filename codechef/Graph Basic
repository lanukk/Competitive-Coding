Graph
There are two type of implementation of GRAPH:
1st - 2D array (its not that good because of the time to traverse is always n^2)

2nd - Adjacency List

We will use adjacency list interpretation in these explanation
class graph{
	map<int , list<int> > mp;
	public:
	      void add( int x , int y)
	      {
	      mp[x].pb(y);
	      mp[y].pb(x);
	      }
}

BFS (Breadth First Search)

Its like level order traversal in trees.

We use queue in order to traverse a graph in this.
First we insert source node(where to start) then we go to its neighbours and side by side we maintain a map of visited nodes.

IMPLEMENTATION :

void bfs(int src)
{
	queue<int> q;
	map<int , int > visited;
	q.push(src);
	visited[src]=1;
	while(!q.empty())
	{
	int node=q.front();
	cout<<node<<" ";
	q.pop();
		for(auto nbr: mp[node])
			{
				if(visited[nbr]==0)
				{
					q.push(nbr);
					visited[nbr]=1;
				}
			}
	}
}


DFS(Depth First Search)

This is a recursive way to Traverse a graph.

In this, we particularly make 2 functions.
1st dfs_helper()
2nd dfs()

In dfs() we make a visited map which helps in setting values of all nodes to 0(i.e. they are not visited)

IMPLEMENTATION:

void dfs()
{
	map<int, int> visited;
	for(auto element: mp)
	{
	  	visited[element.first]=0;
	}

	dfs_helper(0,visited);
}

In dfs_helper(), we use recursion to print all the components of the graph by checking if the node is not traversed already.

IMPLEMENTATION:

void dfs_helper(int src,map<int, int > &visited)
{
	cout<<src<<" ";
	visited[src]=1;
	for(auto nbr : mp)
		{	
			if(visited[nbr]==0)
				{
					dfs_helper(nbr,visited);
				}	
		}
}



Q   - How can we tell a difference between a tree or a graph.
Ans - A graph always have a cycle but a tree doesn't have a cycle.

SOLUTION:

BY USING BFS:

We have to check two conditions
1st- if the node is again visited then its more likely to have a cycle.
2nd- if the node is again visited then it should be only of the parent

lets consider a graph.
1---2
|   |
3---4

If we use BFS from 1, we traverse to 2 and 3 then if we traverse from 2 then we get 1,4 then when we go to 4, we get 3 and 2.

when we traverse from 4 we get 3 again that we had already traversed, which is voilating our condition that we should not have a again visited node.

when we traversed from 2 we get 1 and 4, here we find 1 which is already visited but it is a parent node so it doesn't voilate any condition.

lets take another example
1---2
|
3---4

If we use BFS from 1, we go to 2 and 3.

now, 2 has only 1 neighbour and it is a parent so there's no problem.

now, we go to '3', it has 2 neighbour, it has 1 and 4 as neighbour. '1' is parent node so no problem and 4 is also not visited.

now we go to 4, 4 has only 1 neighbour '3' which is the parent of '4'.

Hence, example 1 is a graph but example 2 is a tree.


We make a parent array which stores the parent of the current nbr.
IMPLEMENTATION:

bool istree(int n)           //n=number of nodes
{
	queue<int> q;
	map<int, int > visited;
	q.push(0);               //as a first node
	int parent[n+1];
	visited[0]=1;
	while(!q.empty())
	{
		int node=q.front();
		q.pop();


		for(auto nbr: gm[node])
		{
			if(visited[nbr]==1 && parent[node]!=nbr) 
			{
			/* the second statement means that parent and neighbour of node are not equal. */
				return 0;
			}
			else if(visited[nbr]==0)
			{
				visited[nbr]=1;
				q.push(nbr);
				parent[nbr]=node;   // this store parent of current neighbour
			}
		}
	}
	return 1;

}

